diff -Naur LoopInvGen+HE/bin/Infer.ml LoopInvGen.Peano/bin/Infer.ml
--- LoopInvGen+HE/bin/Infer.ml	2019-02-24 00:17:33.036533023 +0530
+++ LoopInvGen.Peano/bin/Infer.ml	2019-03-03 23:29:17.905045070 +0530
@@ -9,7 +9,7 @@
              (Sexplib.Sexp.to_string_hum ~indent:4 (LIG.sexp_of_stats stats))
          ; Out_channel.close stats_chan
 
-let main zpath statefile logfile statsfile level
+let main zpath statefile logfile statsfile
          max_conflicts max_strengthenings max_restarts max_steps_on_restart
          filename () =
   Log.enable ~msg:"INFER" logfile ;
@@ -30,9 +30,7 @@
          _PIE = {
            LIG.default_config._VPIE._PIE with
            _Synthesizer = {
-             LIG.default_config._VPIE._PIE._Synthesizer with
              logic = logic
-           ; max_level = level
            }
            ; max_conflict_group_size = (if max_conflicts > 0 then max_conflicts
                                         else (logic.conflict_group_size_multiplier
@@ -62,8 +60,6 @@
       +> flag "-t" (optional string)
          ~doc:"FILENAME output statistics"
 
-      +> flag "-level" (optional_with_default 6 int)
-         ~doc:"INTEGER the maximum expressiveness level. 6 = peano arith"
       +> flag "-max-conflicts" (optional_with_default 0 int)
          ~doc:"INTEGER max size of the conflict group (POS+NEG). 0 = auto"
       +> flag "-max-strengthenings" (optional_with_default (LIG.default_config._VPIE.max_tries) int)
diff -Naur LoopInvGen+HE/loopinvgen.sh LoopInvGen.Peano/loopinvgen.sh
--- LoopInvGen+HE/loopinvgen.sh	2019-03-03 23:34:46.106411950 +0530
+++ LoopInvGen.Peano/loopinvgen.sh	2019-03-03 23:34:29.043371401 +0530
@@ -206,8 +206,8 @@
 show_status "(inferring)"
 
 timeout --foreground $INFER_TIMEOUT \
-        $INFER -s "$TESTCASE_ALL_STATES" -level "$EXPRESSIVENESS_LEVEL" \
-               ${DO_LOG[infer]} $INFER_ARGS ${STATS_ARG}                \
+        $INFER -s "$TESTCASE_ALL_STATES" ${DO_LOG[infer]}  \
+               $INFER_ARGS ${STATS_ARG}                    \
                "$TESTCASE_PROCESSED" > "$TESTCASE_INVARIANT"
 INFER_RESULT_CODE=$?
 
diff -Naur LoopInvGen+HE/src/IntegerComponents.ml LoopInvGen.Peano/src/IntegerComponents.ml
--- LoopInvGen+HE/src/IntegerComponents.ml	2019-02-23 23:55:35.410823108 +0530
+++ LoopInvGen.Peano/src/IntegerComponents.ml	2019-03-03 23:23:13.443738005 +0530
@@ -14,23 +14,56 @@
 
 let (=/=) = fun x y -> (not (Expr.equal x y))
 
-let equality = [
+let linear = [
   {
-    name = "int-eq";
-    codomain = Type.BOOL;
-    domain = [Type.INT;Type.INT];
+    name = "int-add";
+    codomain = Type.INT;
+    domain = [Type.INT; Type.INT];
     is_argument_valid = (function
-                         | [(Const _) ; (Const _)] -> false
-                         | [x ; y] -> x =/= y
+                         | [x ; FCall (comp, [_ ; y])] when String.equal comp.name "int-sub"
+                           -> x =/= y && (x =/= Const (Value.Int 0))
+                         | [FCall (comp, [_ ; x]) ; y] when String.equal comp.name "int-sub"
+                           -> x =/= y && (y =/= Const (Value.Int 0))
+                         | [x ; y] -> (x =/= Const (Value.Int 0)) && (y =/= Const (Value.Int 0))
                          | _ -> false);
-    evaluate = (function [@warning "-8"] [Value.Int x ; Value.Int y] -> Value.Bool (x = y));
-    to_string = (fun [@warning "-8"] [a ; b] -> "(= " ^ a ^ " " ^ b ^ ")");
+    evaluate = (function [@warning "-8"] [Value.Int x ; Value.Int y] -> Value.Int (x + y));
+    to_string = (fun [@warning "-8"] [a ; b] -> "(+ " ^ a ^ " " ^ b ^ ")");
     global_constraints = (fun _ -> [])
-  }
-]
-
-let relational = equality @ [
-   {
+  } ;
+  {
+    name = "lin-int-mult";
+    codomain = Type.INT;
+    domain = [Type.INT; Type.INT];
+    is_argument_valid = (function
+                         | [x ; y]
+                           -> (x =/= Const (Value.Int 0)) && (x =/= Const (Value.Int 1))
+                           && (y =/= Const (Value.Int 0)) && (y =/= Const (Value.Int 1))
+                           && (is_constant x || is_constant y)
+                         | _ -> false);
+    evaluate = (function [@warning "-8"] [Value.Int x ; Value.Int y] -> Value.Int (x * y));
+    to_string = (fun [@warning "-8"] [a ; b] -> "(* " ^ a ^ " " ^ b ^ ")");
+    global_constraints = (fun _ -> [])
+  } ;
+  {
+    name = "int-sub";
+    codomain = Type.INT;
+    domain = [Type.INT; Type.INT];
+    is_argument_valid = (function
+                         | [(FCall (comp, [x ; y])) ; z] when String.equal comp.name "int-add"
+                           -> x =/= z && y =/= z && (z =/= Const (Value.Int 0))
+                         | [(FCall (comp, [x ; _])) ; y] when String.equal comp.name "int-sub"
+                           -> x =/= y && (y =/= Const (Value.Int 0))
+                         | [x ; (FCall (comp, [y ; _]))] when (String.equal comp.name "int-sub"
+                                                              || String.equal comp.name "int-add")
+                           -> x =/= y
+                         | [x ; y] -> (x =/= y)
+                                   && (x =/= Const (Value.Int 0)) && (y =/= Const (Value.Int 0))
+                         | _ -> false);
+    evaluate = (function [@warning "-8"] [Value.Int x ; Value.Int y] -> Value.Int (x - y));
+    to_string = (fun [@warning "-8"] [a ; b] -> "(- " ^ a ^ " " ^ b ^ ")");
+    global_constraints = (fun _ -> [])
+  } ;
+  {
     name = "int-geq";
     codomain = Type.BOOL;
     domain = [Type.INT;Type.INT];
@@ -77,64 +110,22 @@
     evaluate = (function [@warning "-8"] [Value.Int x ; Value.Int y] -> Value.Bool (x > y));
     to_string = (fun [@warning "-8"] [a ; b] -> "(> " ^ a ^ " " ^ b ^ ")");
     global_constraints = (fun _ -> [])
-  }
-]
-
-let presburger = relational @ [
-  {
-    name = "int-add";
-    codomain = Type.INT;
-    domain = [Type.INT; Type.INT];
-    is_argument_valid = (function
-                         | [x ; FCall (comp, [_ ; y])] when String.equal comp.name "int-sub"
-                           -> x =/= y && (x =/= Const (Value.Int 0))
-                         | [FCall (comp, [_ ; x]) ; y] when String.equal comp.name "int-sub"
-                           -> x =/= y && (y =/= Const (Value.Int 0))
-                         | [x ; y] -> (x =/= Const (Value.Int 0)) && (y =/= Const (Value.Int 0))
-                         | _ -> false);
-    evaluate = (function [@warning "-8"] [Value.Int x ; Value.Int y] -> Value.Int (x + y));
-    to_string = (fun [@warning "-8"] [a ; b] -> "(+ " ^ a ^ " " ^ b ^ ")");
-    global_constraints = (fun _ -> [])
   } ;
   {
-    name = "int-sub";
-    codomain = Type.INT;
-    domain = [Type.INT; Type.INT];
-    is_argument_valid = (function
-                         | [(FCall (comp, [x ; y])) ; z] when String.equal comp.name "int-add"
-                           -> x =/= z && y =/= z && (z =/= Const (Value.Int 0))
-                         | [(FCall (comp, [x ; _])) ; y] when String.equal comp.name "int-sub"
-                           -> x =/= y && (y =/= Const (Value.Int 0))
-                         | [x ; (FCall (comp, [y ; _]))] when (String.equal comp.name "int-sub"
-                                                              || String.equal comp.name "int-add")
-                           -> x =/= y
-                         | [x ; y] -> (x =/= y)
-                                   && (x =/= Const (Value.Int 0)) && (y =/= Const (Value.Int 0))
-                         | _ -> false);
-    evaluate = (function [@warning "-8"] [Value.Int x ; Value.Int y] -> Value.Int (x - y));
-    to_string = (fun [@warning "-8"] [a ; b] -> "(- " ^ a ^ " " ^ b ^ ")");
-    global_constraints = (fun _ -> [])
-  }
-]
-
-let all_linear = presburger @ [
-  {
-    name = "lin-int-mult";
-    codomain = Type.INT;
-    domain = [Type.INT; Type.INT];
+    name = "int-eq";
+    codomain = Type.BOOL;
+    domain = [Type.INT;Type.INT];
     is_argument_valid = (function
-                         | [x ; y]
-                           -> (x =/= Const (Value.Int 0)) && (x =/= Const (Value.Int 1))
-                           && (y =/= Const (Value.Int 0)) && (y =/= Const (Value.Int 1))
-                           && (is_constant x || is_constant y)
+                         | [(Const _) ; (Const _)] -> false
+                         | [x ; y] -> x =/= y
                          | _ -> false);
-    evaluate = (function [@warning "-8"] [Value.Int x ; Value.Int y] -> Value.Int (x * y));
-    to_string = (fun [@warning "-8"] [a ; b] -> "(* " ^ a ^ " " ^ b ^ ")");
+    evaluate = (function [@warning "-8"] [Value.Int x ; Value.Int y] -> Value.Bool (x = y));
+    to_string = (fun [@warning "-8"] [a ; b] -> "(= " ^ a ^ " " ^ b ^ ")");
     global_constraints = (fun _ -> [])
   }
 ]
 
-let peano = all_linear @[
+let non_linear = [
   {
     name = "nonlin-int-mult";
     codomain = Type.INT;
@@ -145,10 +136,7 @@
     evaluate = (function [@warning "-8"] [Value.Int x ; Value.Int y] -> Value.Int (x * y));
     to_string = (fun [@warning "-8"] [a ; b] -> "(* " ^ a ^ " " ^ b ^ ")");
     global_constraints = (fun _ -> [])
-  }
-]
-
-let all_non_linear = peano @ [
+  } ;
   {
     name = "int-div";
     codomain = Type.INT;
diff -Naur LoopInvGen+HE/src/Logic.ml LoopInvGen.Peano/src/Logic.ml
--- LoopInvGen+HE/src/Logic.ml	2019-02-23 23:55:34.262848082 +0530
+++ LoopInvGen.Peano/src/Logic.ml	2019-03-03 23:26:25.304436390 +0530
@@ -2,32 +2,24 @@
 
 type t = {
   name : string ;
-  components_per_level : Expr.component list array ;
+  components : Expr.component list ;
   conflict_group_size_multiplier : int
 }
 
 let all_supported =
-   let table = String.Table.create () ~size:2
+  let table = String.Table.create () ~size:2
    in List.iter ~f:(fun component -> String.Table.set table ~key:component.name ~data:component)
         [{
            name = "LIA" ;
-           components_per_level = [|
-             (BooleanComponents.all @ IntegerComponents.equality) ;
-             (BooleanComponents.all @ IntegerComponents.relational) ;
-             (BooleanComponents.all @ IntegerComponents.presburger) ;
-             (BooleanComponents.all @ IntegerComponents.all_linear) ;
-           |] ;
+           components = IntegerComponents.linear @ BooleanComponents.all ;
            conflict_group_size_multiplier = 1
          } ; {
            name = "NIA" ;
-           components_per_level = [|
-             (BooleanComponents.all @ IntegerComponents.equality) ;
-             (BooleanComponents.all @ IntegerComponents.relational) ;
-             (BooleanComponents.all @ IntegerComponents.presburger) ;
-             (BooleanComponents.all @ IntegerComponents.all_linear) ;
-             (BooleanComponents.all @ IntegerComponents.peano) ;
-             (BooleanComponents.all @ IntegerComponents.all_non_linear) ;
-           |] ;
+           components = (List.hd_exn IntegerComponents.linear)
+                     :: (List.hd_exn IntegerComponents.non_linear)
+                     :: (List.tl_exn (List.tl_exn IntegerComponents.linear))
+                      @ (List.tl_exn IntegerComponents.non_linear)
+                      @ BooleanComponents.all ;
            conflict_group_size_multiplier = 2
          }]
     ; table
diff -Naur LoopInvGen+HE/src/Synthesizer.ml LoopInvGen.Peano/src/Synthesizer.ml
--- LoopInvGen+HE/src/Synthesizer.ml	2019-03-03 23:43:16.951634250 +0530
+++ LoopInvGen.Peano/src/Synthesizer.ml	2019-03-03 23:28:02.148779792 +0530
@@ -3,22 +3,12 @@
 open Exceptions
 open Utils
 
-type cost_attr = Height | Size
-
 type config = {
-  cost_limit : int ;
-  cost_attribute : cost_attr ;
-  cost_function : int -> int -> float ;
-  logic : Logic.t ;
-  max_level : int ;
+  logic : Logic.t
 }
 
 let default_config : config = {
-  cost_limit = 25 ;
-  cost_attribute = Size ;
-  cost_function = (fun g_cost e_cost -> (Int.to_float e_cost) *. (Float.log (Int.to_float g_cost))) ;
-  logic = Logic.of_string "LIA" ;
-  max_level = 6 ;
+  logic = Logic.of_string "LIA"
 }
 
 type task = {
@@ -45,46 +35,14 @@
 
 exception Success of Expr.t
 
-module DList = Doubly_linked
-
-let divide_size applier arity op_level expr_level remaining_size =
-  let rec eq_helper arity remaining_size acc =
-    if arity = 1 then
-      for l = 0 to expr_level do
-        applier ((l,remaining_size) :: acc)
-      done
-    else
-      begin
-        for l = 0 to expr_level do
-          for s = 1 to remaining_size do
-            eq_helper (arity - 1) (remaining_size - s) ((l,s) :: acc)
-          done
-        done
-      end
-  in let rec neq_helper arity remaining_size acc =
-    if arity = 1 then
-      if List.exists acc ~f:(fun (l,_) -> l = expr_level) then
-        begin
-          for l = 0 to expr_level do
-            applier ((l,remaining_size) :: acc)
-          done
-        end
-      else
-        applier ((expr_level,remaining_size) :: acc)
-    else
-      begin
-        for l = 0 to expr_level do
-          for s = 1 to remaining_size do
-            neq_helper (arity - 1) (remaining_size - s) ((l,s) :: acc)
-          done
-        done
-      end
-  in if expr_level = op_level
-     then eq_helper arity remaining_size []
-     else neq_helper arity remaining_size []
-
-let[@warning "-27"] divide_height applier arity op_level expr_level remaining_height =
-  raise (Internal_Exn "NOT IMPLEMENTED!")
+let rec divide f arity target acc =
+  if arity = 0 then
+    if target = 0 then f acc else ()
+  else begin
+    for i = 1 to target do
+      divide f (arity - 1) (target - i) (i::acc)
+    done
+  end
 
 module Output = struct
   module T = struct
@@ -97,147 +55,97 @@
   include Comparable.Make (T)
 end
 
-let subtract ~(from : Expr.component list) (comps : Expr.component list) =
-  List.filter from ~f:(fun c -> not (List.mem comps c
-                                       ~equal:(fun c1 c2 -> String.equal c1.name c2.name)))
+module DList = Doubly_linked
 
 let solve_impl config consts task stats =
-  let int_components = Array.append
-    (Array.create ~len:1 [])
-    (Array.mapi (Array.init (Int.min config.max_level (Array.length config.logic.components_per_level))
-                            ~f:(fun i -> config.logic.components_per_level.(i)))
-                ~f:(fun level comps
-                    -> List.filter ~f:(fun c -> Poly.equal c.codomain Type.INT)
-                                   (if level < 1 then comps
-                                    else subtract ~from:comps (config.logic.components_per_level.(level - 1))))) in
-  let bool_components = Array.append
-    (Array.create ~len:1 [])
-    (Array.mapi (Array.init (Int.min config.max_level (Array.length config.logic.components_per_level))
-                            ~f:(fun i -> config.logic.components_per_level.(i)))
-                ~f:(fun level comps
-                    -> List.filter ~f:(fun c -> Poly.equal c.codomain Type.BOOL)
-                                   (if level < 1 then comps
-                                    else subtract ~from:comps (config.logic.components_per_level.(level - 1))))) in
-
-  Log.debug (lazy ( "  $ INT Components:"
-                  ^ (Array.fold ~init:"" int_components
-                       ~f:(fun s l -> s ^ (Log.indented_sep 2) ^ "[" ^ (List.to_string_map l  ~sep:", " ~f:(fun (c : Expr.component) -> c.name)) ^ "]"))))
-  ;
-  Log.debug (lazy ( "  $ BOOL Components:"
-                  ^ (Array.fold ~init:"" bool_components
-                       ~f:(fun s l -> s ^ (Log.indented_sep 2) ^ "[" ^ (List.to_string_map l  ~sep:", " ~f:(fun (c : Expr.component) -> c.name)) ^ "]"))))
-  ;
+  let int_components = List.filter ~f:(fun c -> Poly.equal c.codomain Type.INT) config.logic.components in
+  let bool_components = List.filter ~f:(fun c -> Poly.equal c.codomain Type.BOOL) config.logic.components in
 
-  let int_candidates =
-    Array.init ((Array.length config.logic.components_per_level) + 1)
-      ~f:(fun _ -> Array.init config.cost_limit ~f:(fun _ -> DList.create ())) in
-  let bool_candidates =
-    Array.init ((Array.length config.logic.components_per_level) + 1)
-      ~f:(fun _ -> Array.init config.cost_limit ~f:(fun _ -> DList.create ())) in
+  let int_candidates = Array.init max_size ~f:(fun _ -> DList.create ()) in
+  let bool_candidates = Array.init max_size ~f:(fun _ -> DList.create ()) in
 
   let seen_outputs = ref (Set.empty (module Output)) in
-  let add_candidate candidates_set level cost (candidate : Expr.synthesized) =
+  let add_candidate candidates_set (candidate : Expr.synthesized) =
     let old_size = Set.length !seen_outputs
      in seen_outputs := Set.add !seen_outputs candidate.outputs
       ; if (Set.length !seen_outputs) = old_size then false
-        else (ignore (DList.insert_last candidates_set.(level).(cost) candidate) ; true)
+        else (ignore (DList.insert_last candidates_set candidate) ; true)
   in
 
   let constants =
     (List.dedup_and_sort ~compare:Value.compare
-       ( [ Value.Int 0 ; Value.Int 1 ; Value.Bool true ; Value.Bool false ]
-       @ (List.map ~f:(function Value.Int x -> Value.Int (abs x) | x -> x) consts)))
+       (([ Value.Int 0 ; Value.Int 1 ; Value.Bool true ; Value.Bool false ]
+        @ List.map ~f:(function Value.Int x -> Value.Int (abs x) | x -> x) consts)))
   in
+
   let add_constant_candidate value =
     let candidate : Expr.synthesized = {
       expr = Expr.Const value;
       outputs = Array.create ~len:(Array.length task.outputs) value;
     } in match Value.typeof value with
-         | Type.BOOL -> ignore (add_candidate bool_candidates 0 1 candidate)
-         | Type.INT -> ignore (add_candidate int_candidates 0 1 candidate)
-  in List.(iter (rev constants) ~f:add_constant_candidate)
-  ;
+         | Type.BOOL -> ignore (add_candidate bool_candidates.(1) candidate)
+         | Type.INT -> ignore (add_candidate int_candidates.(1) candidate)
+  in
+
+  (* Log.debug (lazy ("  + Loaded Constants: [" ^ (List.to_string_map constants ~sep:"; " ~f:Value.to_string) ^ "]")); *)
+  List.(iter (rev constants) ~f:add_constant_candidate);
 
   List.iteri task.inputs ~f:(fun i input ->
     let candidates = match Value.typeof input.(1) with
       | Type.INT -> int_candidates
       | Type.BOOL -> bool_candidates
-    in ignore (add_candidate candidates 0 1 { expr = Expr.Var i ; outputs = input }))
+    in ignore (add_candidate candidates.(1) { expr = Expr.Var i
+                                            ; outputs = input }))
   ;
 
-  let f_cost = match config.cost_attribute with Height -> Expr.height | Size -> Expr.size in
-  let f_divide = match config.cost_attribute with Height -> divide_height | Size -> divide_size in
-
   let check (candidate : Expr.synthesized) =
-    (* Log.debug (lazy ("  > Now checking (@ cost " ^ (Int.to_string (f_cost candidate.expr)) ^ "): "
-                       ^ (Expr.to_string (Array.of_list task.arg_names) candidate.expr))) ; *)
+    (* Log.debug (lazy ("  > Now checking (@ size " ^ (Int.to_string (Expr.size candidate.expr)) ^ "): "
+                    ^ (Expr.to_string (Array.of_list task.arg_names) candidate.expr))); *)
     if Array.equal ~equal:Value.equal task.outputs candidate.outputs
     then raise (Success candidate.expr)
   in
 
   let task_codomain = Value.typeof task.outputs.(1) in
   begin match task_codomain with
-    | Type.INT -> DList.iter ~f:check int_candidates.(0).(1);
-    | Type.BOOL -> DList.iter ~f:check bool_candidates.(0).(1);
+  | Type.INT -> DList.iter ~f:check int_candidates.(1);
+  | Type.BOOL -> DList.iter ~f:check bool_candidates.(1);
   end ;
 
-  let apply_component op_level expr_level cost arg_types applier =
+  let apply_component size arg_types applier =
     let rec apply_cells acc types locations =
       match types, locations with
-      | (typ :: types, (lvl,loc) :: locations)
-        -> DList.iter ~f:(fun x -> apply_cells (x :: acc) types locations)
+      | (typ :: typs , i :: locs)
+        -> DList.iter ~f:(fun x -> apply_cells (x :: acc) typs locs)
                       begin match typ with
-                        | Type.INT -> int_candidates.(lvl).(loc)
-                        | Type.BOOL -> bool_candidates.(lvl).(loc)
+                        | Type.INT -> int_candidates.(i)
+                        | Type.BOOL -> bool_candidates.(i)
                       end
       | ([], []) -> applier (List.rev acc)
       | _ -> raise (Internal_Exn "Impossible case!")
-    in f_divide (apply_cells [] arg_types) (List.length arg_types) op_level expr_level (cost - 1)
+    in divide (apply_cells [] arg_types) (List.length arg_types) (size - 1) []
   in
-  let expand_component op_level expr_level cost candidates component =
+  let expand_component size candidates component =
     let applier args =
       stats.enumerated <- stats.enumerated + 1;
       match Expr.apply component args with
       | None -> stats.pruned <- stats.pruned + 1
       | Some result
-        -> let expr_cost = f_cost result.expr
-            in if expr_cost < config.cost_limit
+        -> let h_value = Expr.size result.expr
+            in if h_value < max_size
                then (if Poly.equal task_codomain component.codomain then check result)
-             ; if not (add_candidate candidates expr_level expr_cost result)
+             ; if not (add_candidate candidates.(h_value) result)
                then stats.pruned <- stats.pruned + 1
-    in apply_component op_level expr_level cost component.domain applier
+    in apply_component size component.domain applier
   in
-  let ordered_level_cost =
-    let grammar_cost level = (List.length constants) * (List.length config.logic.components_per_level.(level-1))
-    in List.sort ~compare:(fun (level1,cost1) (level2,cost2)
-                           -> Float.compare (config.cost_function (grammar_cost level1) cost1)
-                                            (config.cost_function (grammar_cost level2) cost2))
-                 (List.cartesian_product (List.range 1 ~stop:`inclusive (Int.min config.max_level (Array.length config.logic.components_per_level)))
-                                         (List.range 2 config.cost_limit))
-  in
-  Log.debug (lazy ( "  $ Exploration order (G,k):" ^ (Log.indented_sep 3)
-                  ^ (List.to_string_map ordered_level_cost ~sep:" > "
-                       ~f:(fun (l,c) -> "(" ^ (Int.to_string l)
-                                      ^ "," ^ (Int.to_string c) ^ ")"))))
-  ;
-
-  let seen_level_cost = ref (Set.empty (module IntTuple)) in
-  List.iter ordered_level_cost
-    ~f:(fun (level,cost)
-        -> List.(iter (cartesian_product (range ~stop:`inclusive 1 level) (range 2 cost))
-             ~f:(fun (l,c) -> if not (Set.mem !seen_level_cost (l,c))
-                              then failwith ( "Internal Error :: Bad guiding function for synthesis. "
-                                            ^ "Exploring (G=" ^ (Int.to_string level)
-                                            ^ ",k=" ^ (Int.to_string cost) ^ ") before (G="
-                                            ^ (Int.to_string l) ^ ",k=" ^ (Int.to_string c)
-                                            ^ ")!")))
-         ; seen_level_cost := (Set.add !seen_level_cost (level, cost))
-         ; List.iter (List.range 1 ~stop:`inclusive level)
-             ~f:(fun l -> List.iter2_exn
-                            [bool_candidates ; int_candidates]
-                            [bool_components.(l) ; int_components.(l)]
-                            ~f:(fun cands comps
-                                -> List.iter comps ~f:(expand_component l level cost cands))))
+  let expand_type size candidates components =
+    List.iter ~f:(expand_component size candidates) components
+  in
+  let expand size =
+    List.iter2_exn ~f:(expand_type size)
+                   [int_candidates ; bool_candidates]
+                   [int_components ; bool_components]
+  in
+  for size = 2 to max_size-1 ; do expand size done
 
 let solve ?(config = default_config) (consts : Value.t list) (task : task) : result =
   Log.debug (lazy ("Running enumerative synthesis:"));
